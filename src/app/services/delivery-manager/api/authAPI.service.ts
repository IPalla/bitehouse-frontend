/**
 * API Delivery Manager
 * API Delivery Manager
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpEventType,
} from '@angular/common/http';

import { Auth } from '../model/auth';
import { JwtToken } from '../model/jwtToken';
import { Configuration } from '../configuration';
import { environment } from 'src/environments/environment';
import { catchError, map, Observable, of } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthAPIService {
  protected basePath =
    environment?.deliveryManagerUrl ||
    'https://delivery-manager.bitehouseburger.es/delivery-manager';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  protected token: string | null;
  router: any;

  constructor(protected httpClient: HttpClient) {
    this.basePath = environment?.deliveryManagerUrl || this.basePath;
    this.token = localStorage.getItem('token');
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Authenticates user
   *
   * @param body Request Body to authenticate a rider
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public authPost(
    body?: Auth,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<boolean>;
  public authPost(
    body?: Auth,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<boolean>;
  public authPost(
    body?: Auth,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<boolean>;
  public authPost(
    body?: Auth,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<boolean> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    headers = headers.set('Content-Type', httpHeaderAccepts);

    return this.httpClient
      .request<JwtToken>('post', `${this.basePath}/auth`, {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: 'body',
        reportProgress: reportProgress,
      })
      .pipe(
        map((response: JwtToken) => {
          localStorage.setItem('token', `Bearer ${response.token}`);
          console.log(`Storing token: ${response.token}`);
          return true;
        }),
        catchError((error: any, caught: any) => {
          console.log(`Error during login`);
          if (error.status === 401) {
            return of(false);
          }
          return of(false);
        })
      );
  }

  public logout() {
    localStorage.removeItem('token');
    window.location.href = '/login';
  }

  public getToken(): string | null {
    console.log(`GET token`);
    const token = localStorage.getItem('token');
    console.log(`Obtained token: ${token}`);
    if (!token || token === undefined || token === null) {
      //this.logout();
    }
    return token;
  }
}
