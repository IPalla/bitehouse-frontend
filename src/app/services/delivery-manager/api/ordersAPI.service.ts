/**
 * API Delivery Manager
 * API Delivery Manager
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Injectable } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { catchError, Observable } from 'rxjs';

import { Order } from '../model/order';
import { StatusUpdate } from '../model/statusUpdate';
import { Configuration } from '../configuration';

import { environment } from 'src/environments/environment';
import { AuthAPIService } from './authAPI.service';
import {
  HandleError,
  HttpErrorHandler,
} from 'src/app/http-error-handler.service';
import { OrderNotification } from '../model/orderNotification';

@Injectable({
  providedIn: 'root',
})
export class OrdersAPIService {
  protected basePath =
    environment?.deliveryManagerUrl ||
    'https://delivery-manager.bitehouseburger.es/delivery-manager';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  errorHandler: HandleError;
  notificationsObservable: Observable<OrderNotification> | undefined =
    undefined;

  constructor(
    protected httpClient: HttpClient,
    private authApiService: AuthAPIService,
    httpErrorHandler: HttpErrorHandler
  ) {
    this.basePath = environment?.deliveryManagerUrl || this.basePath;
    this.errorHandler = httpErrorHandler.createHandleError('OrdersAPIService');
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Get orders
   * Retrieve orders using different filters
   * @param orderType Order type filter
   * @param startDate Start date filter
   * @param endDate Start date filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ordersGet(
    orderType?: string[],
    startDate?: string,
    endDate?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Order[]>;
  public ordersGet(
    orderType?: string[],
    startDate?: string,
    endDate?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Order[]>>;
  public ordersGet(
    orderType?: string[],
    startDate?: string,
    endDate?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Order[]>>;
  public ordersGet(
    orderType?: string[],
    startDate?: string,
    endDate?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (orderType !== undefined && orderType !== null && orderType.length > 0) {
      orderType.forEach((type) => {
        queryParameters = queryParameters.set('order_type', <any>type);
      });
    }
    if (startDate !== undefined && startDate !== null) {
      queryParameters = queryParameters.set('start_date', <any>startDate);
    }
    if (endDate !== undefined && endDate !== null) {
      queryParameters = queryParameters.set('end_date', <any>endDate);
    }

    let headers = this.defaultHeaders;
    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient
      .request<Order[]>('get', `${this.basePath}/orders`, {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      })
      .pipe(catchError(this.errorHandler('ordersGet')));
  }

  /**
   * Get orders
   * Retrieve orders using different filters
   * @param orderId Order identifier
   * @param authorizationHeader an authorization header
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ordersOrderIdGet(
    orderId: string,
    authorizationHeader: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Order>;
  public ordersOrderIdGet(
    orderId: string,
    authorizationHeader: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Order>>;
  public ordersOrderIdGet(
    orderId: string,
    authorizationHeader: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Order>>;
  public ordersOrderIdGet(
    orderId: string,
    authorizationHeader: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (orderId === null || orderId === undefined) {
      throw new Error(
        'Required parameter orderId was null or undefined when calling ordersOrderIdGet.'
      );
    }

    if (authorizationHeader === null || authorizationHeader === undefined) {
      throw new Error(
        'Required parameter authorizationHeader was null or undefined when calling ordersOrderIdGet.'
      );
    }

    let headers = this.defaultHeaders;
    if (authorizationHeader !== undefined && authorizationHeader !== null) {
      headers = headers.set(
        'authorization_header',
        String(authorizationHeader)
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient
      .request<Order>(
        'get',
        `${this.basePath}/orders/${encodeURIComponent(String(orderId))}`,
        {
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress,
        }
      )
      .pipe(catchError(this.errorHandler('ordersGet')));
  }

  /**
   * Updates the order status
   * Updates order status using internal order id
   * @param xUserLatitude User latitude
   * @param xUserLongitude User longitude
   * @param orderId Order identifier
   * @param body Request body to update an order
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ordersOrderIdPatch(
    xUserLatitude?: number,
    xUserLongitude?: number,
    orderId?: string,
    body?: StatusUpdate,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public ordersOrderIdPatch(
    xUserLatitude?: number,
    xUserLongitude?: number,
    orderId?: string,
    body?: StatusUpdate,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public ordersOrderIdPatch(
    xUserLatitude?: number,
    xUserLongitude?: number,
    orderId?: string,
    body?: StatusUpdate,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public ordersOrderIdPatch(
    xUserLatitude?: number,
    xUserLongitude?: number,
    orderId?: string,
    body?: StatusUpdate,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (orderId === null || orderId === undefined) {
      throw new Error(
        'Required parameter orderId was null or undefined when calling ordersOrderIdPatch.'
      );
    }
    let headers = this.defaultHeaders;
    let token = this.authApiService.getToken();
    if (token) {
      headers = headers.set('Authorization', token);
    }
    if (xUserLatitude !== undefined && xUserLatitude !== null) {
      headers = headers.set('x-user-latitude', String(xUserLatitude));
    }
    if (xUserLongitude !== undefined && xUserLongitude !== null) {
      headers = headers.set('x-user-longitude', String(xUserLongitude));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient
      .request<any>(
        'patch',
        `${this.basePath}/orders/${encodeURIComponent(String(orderId))}`,
        {
          body: body,
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress,
        }
      )
      .pipe(catchError(this.errorHandler('ordersPatch')));
  }

  public getOrdersNotifications(): Observable<OrderNotification> {
    if (this.notificationsObservable) {
      return this.notificationsObservable;
    }
    this.notificationsObservable = new Observable((observer) => {
      const eventSource = new EventSource(
        `${this.basePath}/orders/notifications/subscribe`
      );
      eventSource.onmessage = (event) =>
        observer.next(JSON.parse(event.data) as OrderNotification);
      eventSource.onerror = (error) => observer.error(error);
      return () => {
        eventSource.close();
      };
    });
    return this.notificationsObservable;
  }
}
