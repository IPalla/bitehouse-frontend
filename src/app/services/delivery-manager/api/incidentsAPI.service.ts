/**
 * API Delivery Manager
 * API Delivery Manager
 *
 * OpenAPI spec version: 1.0.6
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Injectable } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';

import { catchError, Observable } from 'rxjs';

import { Incident } from '../model/incident';
import { Order } from '../model/order';

import { Configuration } from '../configuration';
import { AuthAPIService } from './authAPI.service';
import { HandleError, HttpErrorHandler } from 'src/app/http-error-handler.service';
import { environment } from 'src/environments/environment';

@Injectable()
export class IncidentsAPIService {
    protected basePath =
      environment?.deliveryManagerUrl ||
      'https://delivery-manager.bitehouseburger.es/delivery-manager';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    errorHandler: HandleError;
    observer: any;
    eventSource: EventSource | undefined = undefined;
    constructor(
        protected httpClient: HttpClient,
        private authApiService: AuthAPIService,
        httpErrorHandler: HttpErrorHandler,
      ) {
        console.log(`Incident api service initialized`);
        this.basePath = environment?.deliveryManagerUrl || this.basePath;
        this.errorHandler = httpErrorHandler.createHandleError('IncidentApiService');
      }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Create an incident
   * Create an incident associated to an order
   * @param authorizationHeader an authorization header
   * @param orderId Order identifier
   * @param body Request body to create an incident
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public ordersOrderIdIncidentPost(
    orderId: string,
    body?: Incident,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Order>;
  public ordersOrderIdIncidentPost(
    orderId: string,
    body?: Incident,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Order>>;
  public ordersOrderIdIncidentPost(
    orderId: string,
    body?: Incident,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Order>>;
  public ordersOrderIdIncidentPost(
    orderId: string,
    body?: Incident,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    console.log(`IncidentApiService.ordersOrderIdIncidentPost: ${orderId}`);
    if (orderId === null || orderId === undefined) {
      throw new Error(
        'Required parameter orderId was null or undefined when calling ordersOrderIdIncidentPost.',
      );
    }

    let headers = this.defaultHeaders;

    let token = this.authApiService.getToken();
    if (token) {
      headers = headers.set('Authorization', token);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient
      .request<Order>(
        'post',
        `${this.basePath}/orders/${encodeURIComponent(String(orderId))}/incidents`,
        {
          body: body,
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress,
        },
      )
      .pipe(catchError(this.errorHandler('ordersPatch')));
  }
}
